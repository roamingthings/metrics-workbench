buildscript {
	ext {
		springBootVersion = '2.0.1.RELEASE'
	}
	repositories {
		mavenCentral()
        jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'com.bmuschko:gradle-docker-plugin:3.2.7'
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

group = 'de.roamingthings'
version = '1.0-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
    jcenter()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('io.micrometer:micrometer-registry-prometheus:latest.release')

	runtime('org.springframework.boot:spring-boot-devtools')

	compileOnly('org.projectlombok:lombok')

	testCompile('org.springframework.boot:spring-boot-starter-test')
}

task buildMetricsWbImage(type: DockerBuildImage) {
    dependsOn build
    inputDir = file("$projectDir")
    tag = 'roamingthings/metrics-workbench:latest'
}

task createMetricsWbContainer(type: DockerCreateContainer) {
    dependsOn buildMetricsWbImage
    targetImageId { buildMetricsWbImage.getImageId() }
    portBindings = ['8081:8081']
    containerName = 'metricswb'
}

task startMetricsWbContainer(type: DockerStartContainer) {
    dependsOn createMetricsWbContainer
    targetContainerId { createMetricsWbContainer.getContainerId() }
}

task stopMetricsWbContainer(type: DockerStopContainer) {
    targetContainerId { createMetricsWbContainer.getContainerId() }
}

task functionalTestMetricsWb(type: Test) {
    dependsOn startMetricsWbContainer
    finalizedBy stopMetricsWbContainer
}
