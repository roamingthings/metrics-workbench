buildscript {
	ext {
		springBootVersion = '2.1.5.RELEASE'
	}
	repositories {
		mavenCentral()
        jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.bmuschko:gradle-docker-plugin:6.4.0")
	}
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

group = 'de.roamingthings'
version = '1.0-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
    jcenter()
}


dependencies {
	implementation("org.springframework.boot:spring-boot-starter-web")
	compileOnly("org.projectlombok:lombok")
	annotationProcessor("org.projectlombok:lombok")

	implementation("org.springframework.boot:spring-boot-starter-actuator")
	implementation("io.micrometer:micrometer-registry-prometheus:latest.release")

	runtime("org.springframework.boot:spring-boot-devtools")

	testImplementation("org.springframework.boot:spring-boot-starter-test")
}

task buildMetricsWbImage(type: DockerBuildImage) {
    dependsOn build
    inputDir = file("$projectDir")
    images.add('roamingthings/metrics-workbench:latest')
}

task createMetricsWbContainer(type: DockerCreateContainer) {
    dependsOn buildMetricsWbImage
    targetImageId buildMetricsWbImage.getImageId()
	containerName = 'metricswb'
	hostConfig.portBindings = ['8081:8081']
	hostConfig.autoRemove = true

}

task startMetricsWbContainer(type: DockerStartContainer) {
    dependsOn createMetricsWbContainer
    targetContainerId createMetricsWbContainer.getContainerId()
}

task stopMetricsWbContainer(type: DockerStopContainer) {
    targetContainerId createMetricsWbContainer.getContainerId()
}

task functionalTestMetricsWb(type: Test) {
    dependsOn startMetricsWbContainer
    finalizedBy stopMetricsWbContainer
}
